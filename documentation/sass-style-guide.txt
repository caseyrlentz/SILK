// ========================================
// SASS Style Guide
// ========================================

Additional Resources:
  https://css-tricks.com/sass-style-guide/
  http://sass-guidelin.es/


// ========================================
// Property Ordering
// ========================================

Properties must be ordered using idiomatic css.
https://github.com/necolas/idiomatic-css

? Reasoning: It's easier to understand what is occuring when related items are placed next to each other. It's easier to remove chunks of like properties rather than sorting them out of an unrelated list of properties.

Bad Example (Ordered alphabetically):

.selector {
  border: 1px solid #000;
  display: block;
  list-style: none;
  margin: 0;
  position: relative;
  text-decoration: underline;
}

Good Example (Ordered by property type; idiomatic css):

1: Position
2: Box Model
3: Typography
4: User Interactions
5: Presentational

.selector {
  position: relative;
  display: block;
  margin: 0;
  text-decoration: underline;
  list-style: none;
}


// ========================================
// Ordering of interactivity states
// ========================================

Interacting with an element is usually hooked into :hover and .active states. In addition to the elements states, there are also media queries that can be piled into the mix. The hover state should be declared first and then the active state. Media queries should be nested within the respective state that they affect.

? Reasoning: Ordering interactivity states by the order at which they can occur matches the relationship the user will have with this element. Detailing media queries inside the state they effect helps establish a closer relationship.

Bad Example:

.selector {

  &.active {
    background: #fff;
  }

  &:hover {
    background: #fff;
  }

  @media (min-width: 30em) {

    &.active {
      background: #f0c;
    }

    &:hover {
      background: #f0c;
    }

  }

}

Good Example:

.selector {

  &:hover {
    background: #fff;

    @media (min-width: 30em) {
      background: #f0c;
    }

  }

  &.active {
    background: #fff;

    @media (min-width: 30em) {
      background: #f0c;
    }

  }

}


// ========================================
// Units & Values
// ========================================

Leading zeros must be dropped.

Bad Example:

.selector {
  padding: 0.5em;
}

Good Example:

.selector {
  padding: .5em;
}


// ========================================
// Lists of Values
// ========================================

When multiple values are declared within a single property, break them to a new line.
The exception to this rule being when only 1 value exists for a given property

? Reasoning: Improves legibility of the values. Improves edit access to these values.

Bad Example:

.selector {
  box-shadow: inset 0 0 0 1em #000, inset 0 0 0 2em #000, inset 0 0 0 3em #000;
}

Good Example:

.selector {
  box-shadow:
    inset 0 0 0 1em #000,
    inset 0 0 0 2em #000,
    inset 0 0 0 3em #000;
}

!Exception:

Bad Example:

.selector {
  box-shadow:
    0 0 0 1em #000;
}

Good Example {
  box-shadow: 0 0 0 1em #000;
}


// ========================================
// Indentation
// ========================================

Indentation must be completed using 2 spaces per tab.

? Reasoning: This helps confine code to the 80 column mark. It also reduces the strain as your eyes move from 1 tab to the next.

Bad Example:

.selector {
    background: #000;

    &:hover {
        background: #fff;
    }

}

Good Example:

.selector {
  background: #000;

  &:hover {
    background: #fff;
  }

}


// ========================================
// Line Breaking
// ========================================

Line breaks must occur after every interaction state and every media query.

? Reasoning: Interaction states and media queries are chunks of code. In order to increase legibility, chunks must appear as visual chunks of code. Indentation alone cannot serve that purpose.

Bad Example:

.selector {
  &:hover {
    background: #fff;
    @media (min-width: 30em) {
      background: #f0c;
    }
  }
  &.active {
    background: #fff;
    @media (min-width: 30em) {
      background: #f0c;
    }
  }
}

Good Example:

.selector {

  &:hover {
    background: #fff;

    @media (min-width: 30em) {
      background: #f0c;
    }

  }

  &.active {
    background: #fff;

    @media (min-width: 30em) {
      background: #f0c;
    }

  }

}
